#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:slots,dynamic
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol.TBase import TBase, TFrozenBase, TExceptionBase, TFrozenExceptionBase, TTransport
all_structs = []


class Iface(object):
    def getConfigValue(self, category, option, section):
        """
        Parameters:
         - category
         - option
         - section

        """
        pass

    def setConfigValue(self, category, option, value, section):
        """
        Parameters:
         - category
         - option
         - value
         - section

        """
        pass

    def getConfig(self):
        pass

    def getPluginConfig(self):
        pass

    def pauseServer(self):
        pass

    def unpauseServer(self):
        pass

    def togglePause(self):
        pass

    def statusServer(self):
        pass

    def freeSpace(self):
        pass

    def getServerVersion(self):
        pass

    def kill(self):
        pass

    def restart(self):
        pass

    def getLog(self, offset):
        """
        Parameters:
         - offset

        """
        pass

    def isTimeDownload(self):
        pass

    def isTimeReconnect(self):
        pass

    def toggleReconnect(self):
        pass

    def generatePackages(self, links):
        """
        Parameters:
         - links

        """
        pass

    def checkURLs(self, urls):
        """
        Parameters:
         - urls

        """
        pass

    def parseURLs(self, html, url):
        """
        Parameters:
         - html
         - url

        """
        pass

    def checkOnlineStatus(self, urls):
        """
        Parameters:
         - urls

        """
        pass

    def checkOnlineStatusContainer(self, urls, filename, data):
        """
        Parameters:
         - urls
         - filename
         - data

        """
        pass

    def pollResults(self, rid):
        """
        Parameters:
         - rid

        """
        pass

    def statusDownloads(self):
        pass

    def getPackageData(self, pid):
        """
        Parameters:
         - pid

        """
        pass

    def getPackageInfo(self, pid):
        """
        Parameters:
         - pid

        """
        pass

    def getFileData(self, fid):
        """
        Parameters:
         - fid

        """
        pass

    def getQueue(self):
        pass

    def getCollector(self):
        pass

    def getQueueData(self):
        pass

    def getCollectorData(self):
        pass

    def getPackageOrder(self, destination):
        """
        Parameters:
         - destination

        """
        pass

    def getFileOrder(self, pid):
        """
        Parameters:
         - pid

        """
        pass

    def generateAndAddPackages(self, links, dest):
        """
        Parameters:
         - links
         - dest

        """
        pass

    def addPackage(self, name, links, dest):
        """
        Parameters:
         - name
         - links
         - dest

        """
        pass

    def addFiles(self, pid, links):
        """
        Parameters:
         - pid
         - links

        """
        pass

    def uploadContainer(self, filename, data):
        """
        Parameters:
         - filename
         - data

        """
        pass

    def deleteFiles(self, fids):
        """
        Parameters:
         - fids

        """
        pass

    def deletePackages(self, pids):
        """
        Parameters:
         - pids

        """
        pass

    def pushToQueue(self, pid):
        """
        Parameters:
         - pid

        """
        pass

    def pullFromQueue(self, pid):
        """
        Parameters:
         - pid

        """
        pass

    def restartPackage(self, pid):
        """
        Parameters:
         - pid

        """
        pass

    def restartFile(self, fid):
        """
        Parameters:
         - fid

        """
        pass

    def recheckPackage(self, pid):
        """
        Parameters:
         - pid

        """
        pass

    def stopAllDownloads(self):
        pass

    def stopDownloads(self, fids):
        """
        Parameters:
         - fids

        """
        pass

    def setPackageName(self, pid, name):
        """
        Parameters:
         - pid
         - name

        """
        pass

    def movePackage(self, destination, pid):
        """
        Parameters:
         - destination
         - pid

        """
        pass

    def moveFiles(self, fids, pid):
        """
        Parameters:
         - fids
         - pid

        """
        pass

    def orderPackage(self, pid, position):
        """
        Parameters:
         - pid
         - position

        """
        pass

    def orderFile(self, fid, position):
        """
        Parameters:
         - fid
         - position

        """
        pass

    def setPackageData(self, pid, data):
        """
        Parameters:
         - pid
         - data

        """
        pass

    def deleteFinished(self):
        pass

    def restartFailed(self):
        pass

    def getEvents(self, uuid):
        """
        Parameters:
         - uuid

        """
        pass

    def getAccounts(self, refresh):
        """
        Parameters:
         - refresh

        """
        pass

    def getAccountTypes(self):
        pass

    def updateAccount(self, plugin, account, password, options):
        """
        Parameters:
         - plugin
         - account
         - password
         - options

        """
        pass

    def removeAccount(self, plugin, account):
        """
        Parameters:
         - plugin
         - account

        """
        pass

    def login(self, username, password):
        """
        Parameters:
         - username
         - password

        """
        pass

    def getUserData(self, username, password):
        """
        Parameters:
         - username
         - password

        """
        pass

    def getAllUserData(self):
        pass

    def getServices(self):
        pass

    def hasService(self, plugin, func):
        """
        Parameters:
         - plugin
         - func

        """
        pass

    def call(self, info):
        """
        Parameters:
         - info

        """
        pass

    def getAllInfo(self):
        pass

    def getInfoByPlugin(self, plugin):
        """
        Parameters:
         - plugin

        """
        pass

    def isCaptchaWaiting(self):
        pass

    def getCaptchaTask(self, exclusive):
        """
        Parameters:
         - exclusive

        """
        pass

    def getCaptchaTaskStatus(self, tid):
        """
        Parameters:
         - tid

        """
        pass

    def setCaptchaResult(self, tid, result):
        """
        Parameters:
         - tid
         - result

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def getConfigValue(self, category, option, section):
        """
        Parameters:
         - category
         - option
         - section

        """
        self.send_getConfigValue(category, option, section)
        return self.recv_getConfigValue()

    def send_getConfigValue(self, category, option, section):
        self._oprot.writeMessageBegin('getConfigValue', TMessageType.CALL, self._seqid)
        args = getConfigValue_args()
        args.category = category
        args.option = option
        args.section = section
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getConfigValue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getConfigValue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getConfigValue failed: unknown result")

    def setConfigValue(self, category, option, value, section):
        """
        Parameters:
         - category
         - option
         - value
         - section

        """
        self.send_setConfigValue(category, option, value, section)
        self.recv_setConfigValue()

    def send_setConfigValue(self, category, option, value, section):
        self._oprot.writeMessageBegin('setConfigValue', TMessageType.CALL, self._seqid)
        args = setConfigValue_args()
        args.category = category
        args.option = option
        args.value = value
        args.section = section
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setConfigValue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setConfigValue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def getConfig(self):
        self.send_getConfig()
        return self.recv_getConfig()

    def send_getConfig(self):
        self._oprot.writeMessageBegin('getConfig', TMessageType.CALL, self._seqid)
        args = getConfig_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getConfig(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getConfig_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getConfig failed: unknown result")

    def getPluginConfig(self):
        self.send_getPluginConfig()
        return self.recv_getPluginConfig()

    def send_getPluginConfig(self):
        self._oprot.writeMessageBegin('getPluginConfig', TMessageType.CALL, self._seqid)
        args = getPluginConfig_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPluginConfig(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPluginConfig_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPluginConfig failed: unknown result")

    def pauseServer(self):
        self.send_pauseServer()
        self.recv_pauseServer()

    def send_pauseServer(self):
        self._oprot.writeMessageBegin('pauseServer', TMessageType.CALL, self._seqid)
        args = pauseServer_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_pauseServer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = pauseServer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def unpauseServer(self):
        self.send_unpauseServer()
        self.recv_unpauseServer()

    def send_unpauseServer(self):
        self._oprot.writeMessageBegin('unpauseServer', TMessageType.CALL, self._seqid)
        args = unpauseServer_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_unpauseServer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = unpauseServer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def togglePause(self):
        self.send_togglePause()
        return self.recv_togglePause()

    def send_togglePause(self):
        self._oprot.writeMessageBegin('togglePause', TMessageType.CALL, self._seqid)
        args = togglePause_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_togglePause(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = togglePause_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "togglePause failed: unknown result")

    def statusServer(self):
        self.send_statusServer()
        return self.recv_statusServer()

    def send_statusServer(self):
        self._oprot.writeMessageBegin('statusServer', TMessageType.CALL, self._seqid)
        args = statusServer_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_statusServer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = statusServer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "statusServer failed: unknown result")

    def freeSpace(self):
        self.send_freeSpace()
        return self.recv_freeSpace()

    def send_freeSpace(self):
        self._oprot.writeMessageBegin('freeSpace', TMessageType.CALL, self._seqid)
        args = freeSpace_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_freeSpace(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = freeSpace_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "freeSpace failed: unknown result")

    def getServerVersion(self):
        self.send_getServerVersion()
        return self.recv_getServerVersion()

    def send_getServerVersion(self):
        self._oprot.writeMessageBegin('getServerVersion', TMessageType.CALL, self._seqid)
        args = getServerVersion_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getServerVersion(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getServerVersion_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getServerVersion failed: unknown result")

    def kill(self):
        self.send_kill()
        self.recv_kill()

    def send_kill(self):
        self._oprot.writeMessageBegin('kill', TMessageType.CALL, self._seqid)
        args = kill_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_kill(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = kill_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def restart(self):
        self.send_restart()
        self.recv_restart()

    def send_restart(self):
        self._oprot.writeMessageBegin('restart', TMessageType.CALL, self._seqid)
        args = restart_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_restart(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = restart_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def getLog(self, offset):
        """
        Parameters:
         - offset

        """
        self.send_getLog(offset)
        return self.recv_getLog()

    def send_getLog(self, offset):
        self._oprot.writeMessageBegin('getLog', TMessageType.CALL, self._seqid)
        args = getLog_args()
        args.offset = offset
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getLog(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getLog_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getLog failed: unknown result")

    def isTimeDownload(self):
        self.send_isTimeDownload()
        return self.recv_isTimeDownload()

    def send_isTimeDownload(self):
        self._oprot.writeMessageBegin('isTimeDownload', TMessageType.CALL, self._seqid)
        args = isTimeDownload_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isTimeDownload(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isTimeDownload_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isTimeDownload failed: unknown result")

    def isTimeReconnect(self):
        self.send_isTimeReconnect()
        return self.recv_isTimeReconnect()

    def send_isTimeReconnect(self):
        self._oprot.writeMessageBegin('isTimeReconnect', TMessageType.CALL, self._seqid)
        args = isTimeReconnect_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isTimeReconnect(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isTimeReconnect_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isTimeReconnect failed: unknown result")

    def toggleReconnect(self):
        self.send_toggleReconnect()
        return self.recv_toggleReconnect()

    def send_toggleReconnect(self):
        self._oprot.writeMessageBegin('toggleReconnect', TMessageType.CALL, self._seqid)
        args = toggleReconnect_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_toggleReconnect(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = toggleReconnect_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "toggleReconnect failed: unknown result")

    def generatePackages(self, links):
        """
        Parameters:
         - links

        """
        self.send_generatePackages(links)
        return self.recv_generatePackages()

    def send_generatePackages(self, links):
        self._oprot.writeMessageBegin('generatePackages', TMessageType.CALL, self._seqid)
        args = generatePackages_args()
        args.links = links
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_generatePackages(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = generatePackages_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "generatePackages failed: unknown result")

    def checkURLs(self, urls):
        """
        Parameters:
         - urls

        """
        self.send_checkURLs(urls)
        return self.recv_checkURLs()

    def send_checkURLs(self, urls):
        self._oprot.writeMessageBegin('checkURLs', TMessageType.CALL, self._seqid)
        args = checkURLs_args()
        args.urls = urls
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_checkURLs(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = checkURLs_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "checkURLs failed: unknown result")

    def parseURLs(self, html, url):
        """
        Parameters:
         - html
         - url

        """
        self.send_parseURLs(html, url)
        return self.recv_parseURLs()

    def send_parseURLs(self, html, url):
        self._oprot.writeMessageBegin('parseURLs', TMessageType.CALL, self._seqid)
        args = parseURLs_args()
        args.html = html
        args.url = url
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_parseURLs(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = parseURLs_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "parseURLs failed: unknown result")

    def checkOnlineStatus(self, urls):
        """
        Parameters:
         - urls

        """
        self.send_checkOnlineStatus(urls)
        return self.recv_checkOnlineStatus()

    def send_checkOnlineStatus(self, urls):
        self._oprot.writeMessageBegin('checkOnlineStatus', TMessageType.CALL, self._seqid)
        args = checkOnlineStatus_args()
        args.urls = urls
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_checkOnlineStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = checkOnlineStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "checkOnlineStatus failed: unknown result")

    def checkOnlineStatusContainer(self, urls, filename, data):
        """
        Parameters:
         - urls
         - filename
         - data

        """
        self.send_checkOnlineStatusContainer(urls, filename, data)
        return self.recv_checkOnlineStatusContainer()

    def send_checkOnlineStatusContainer(self, urls, filename, data):
        self._oprot.writeMessageBegin('checkOnlineStatusContainer', TMessageType.CALL, self._seqid)
        args = checkOnlineStatusContainer_args()
        args.urls = urls
        args.filename = filename
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_checkOnlineStatusContainer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = checkOnlineStatusContainer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "checkOnlineStatusContainer failed: unknown result")

    def pollResults(self, rid):
        """
        Parameters:
         - rid

        """
        self.send_pollResults(rid)
        return self.recv_pollResults()

    def send_pollResults(self, rid):
        self._oprot.writeMessageBegin('pollResults', TMessageType.CALL, self._seqid)
        args = pollResults_args()
        args.rid = rid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_pollResults(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = pollResults_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "pollResults failed: unknown result")

    def statusDownloads(self):
        self.send_statusDownloads()
        return self.recv_statusDownloads()

    def send_statusDownloads(self):
        self._oprot.writeMessageBegin('statusDownloads', TMessageType.CALL, self._seqid)
        args = statusDownloads_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_statusDownloads(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = statusDownloads_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "statusDownloads failed: unknown result")

    def getPackageData(self, pid):
        """
        Parameters:
         - pid

        """
        self.send_getPackageData(pid)
        return self.recv_getPackageData()

    def send_getPackageData(self, pid):
        self._oprot.writeMessageBegin('getPackageData', TMessageType.CALL, self._seqid)
        args = getPackageData_args()
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPackageData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPackageData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPackageData failed: unknown result")

    def getPackageInfo(self, pid):
        """
        Parameters:
         - pid

        """
        self.send_getPackageInfo(pid)
        return self.recv_getPackageInfo()

    def send_getPackageInfo(self, pid):
        self._oprot.writeMessageBegin('getPackageInfo', TMessageType.CALL, self._seqid)
        args = getPackageInfo_args()
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPackageInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPackageInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPackageInfo failed: unknown result")

    def getFileData(self, fid):
        """
        Parameters:
         - fid

        """
        self.send_getFileData(fid)
        return self.recv_getFileData()

    def send_getFileData(self, fid):
        self._oprot.writeMessageBegin('getFileData', TMessageType.CALL, self._seqid)
        args = getFileData_args()
        args.fid = fid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFileData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFileData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFileData failed: unknown result")

    def getQueue(self):
        self.send_getQueue()
        return self.recv_getQueue()

    def send_getQueue(self):
        self._oprot.writeMessageBegin('getQueue', TMessageType.CALL, self._seqid)
        args = getQueue_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getQueue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getQueue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getQueue failed: unknown result")

    def getCollector(self):
        self.send_getCollector()
        return self.recv_getCollector()

    def send_getCollector(self):
        self._oprot.writeMessageBegin('getCollector', TMessageType.CALL, self._seqid)
        args = getCollector_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCollector(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCollector_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCollector failed: unknown result")

    def getQueueData(self):
        self.send_getQueueData()
        return self.recv_getQueueData()

    def send_getQueueData(self):
        self._oprot.writeMessageBegin('getQueueData', TMessageType.CALL, self._seqid)
        args = getQueueData_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getQueueData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getQueueData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getQueueData failed: unknown result")

    def getCollectorData(self):
        self.send_getCollectorData()
        return self.recv_getCollectorData()

    def send_getCollectorData(self):
        self._oprot.writeMessageBegin('getCollectorData', TMessageType.CALL, self._seqid)
        args = getCollectorData_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCollectorData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCollectorData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCollectorData failed: unknown result")

    def getPackageOrder(self, destination):
        """
        Parameters:
         - destination

        """
        self.send_getPackageOrder(destination)
        return self.recv_getPackageOrder()

    def send_getPackageOrder(self, destination):
        self._oprot.writeMessageBegin('getPackageOrder', TMessageType.CALL, self._seqid)
        args = getPackageOrder_args()
        args.destination = destination
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPackageOrder(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPackageOrder_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPackageOrder failed: unknown result")

    def getFileOrder(self, pid):
        """
        Parameters:
         - pid

        """
        self.send_getFileOrder(pid)
        return self.recv_getFileOrder()

    def send_getFileOrder(self, pid):
        self._oprot.writeMessageBegin('getFileOrder', TMessageType.CALL, self._seqid)
        args = getFileOrder_args()
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFileOrder(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFileOrder_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFileOrder failed: unknown result")

    def generateAndAddPackages(self, links, dest):
        """
        Parameters:
         - links
         - dest

        """
        self.send_generateAndAddPackages(links, dest)
        return self.recv_generateAndAddPackages()

    def send_generateAndAddPackages(self, links, dest):
        self._oprot.writeMessageBegin('generateAndAddPackages', TMessageType.CALL, self._seqid)
        args = generateAndAddPackages_args()
        args.links = links
        args.dest = dest
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_generateAndAddPackages(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = generateAndAddPackages_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "generateAndAddPackages failed: unknown result")

    def addPackage(self, name, links, dest):
        """
        Parameters:
         - name
         - links
         - dest

        """
        self.send_addPackage(name, links, dest)
        return self.recv_addPackage()

    def send_addPackage(self, name, links, dest):
        self._oprot.writeMessageBegin('addPackage', TMessageType.CALL, self._seqid)
        args = addPackage_args()
        args.name = name
        args.links = links
        args.dest = dest
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addPackage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addPackage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "addPackage failed: unknown result")

    def addFiles(self, pid, links):
        """
        Parameters:
         - pid
         - links

        """
        self.send_addFiles(pid, links)
        self.recv_addFiles()

    def send_addFiles(self, pid, links):
        self._oprot.writeMessageBegin('addFiles', TMessageType.CALL, self._seqid)
        args = addFiles_args()
        args.pid = pid
        args.links = links
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addFiles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addFiles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def uploadContainer(self, filename, data):
        """
        Parameters:
         - filename
         - data

        """
        self.send_uploadContainer(filename, data)
        self.recv_uploadContainer()

    def send_uploadContainer(self, filename, data):
        self._oprot.writeMessageBegin('uploadContainer', TMessageType.CALL, self._seqid)
        args = uploadContainer_args()
        args.filename = filename
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_uploadContainer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = uploadContainer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def deleteFiles(self, fids):
        """
        Parameters:
         - fids

        """
        self.send_deleteFiles(fids)
        self.recv_deleteFiles()

    def send_deleteFiles(self, fids):
        self._oprot.writeMessageBegin('deleteFiles', TMessageType.CALL, self._seqid)
        args = deleteFiles_args()
        args.fids = fids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteFiles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteFiles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def deletePackages(self, pids):
        """
        Parameters:
         - pids

        """
        self.send_deletePackages(pids)
        self.recv_deletePackages()

    def send_deletePackages(self, pids):
        self._oprot.writeMessageBegin('deletePackages', TMessageType.CALL, self._seqid)
        args = deletePackages_args()
        args.pids = pids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deletePackages(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deletePackages_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def pushToQueue(self, pid):
        """
        Parameters:
         - pid

        """
        self.send_pushToQueue(pid)
        self.recv_pushToQueue()

    def send_pushToQueue(self, pid):
        self._oprot.writeMessageBegin('pushToQueue', TMessageType.CALL, self._seqid)
        args = pushToQueue_args()
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_pushToQueue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = pushToQueue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def pullFromQueue(self, pid):
        """
        Parameters:
         - pid

        """
        self.send_pullFromQueue(pid)
        self.recv_pullFromQueue()

    def send_pullFromQueue(self, pid):
        self._oprot.writeMessageBegin('pullFromQueue', TMessageType.CALL, self._seqid)
        args = pullFromQueue_args()
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_pullFromQueue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = pullFromQueue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def restartPackage(self, pid):
        """
        Parameters:
         - pid

        """
        self.send_restartPackage(pid)
        self.recv_restartPackage()

    def send_restartPackage(self, pid):
        self._oprot.writeMessageBegin('restartPackage', TMessageType.CALL, self._seqid)
        args = restartPackage_args()
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_restartPackage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = restartPackage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def restartFile(self, fid):
        """
        Parameters:
         - fid

        """
        self.send_restartFile(fid)
        self.recv_restartFile()

    def send_restartFile(self, fid):
        self._oprot.writeMessageBegin('restartFile', TMessageType.CALL, self._seqid)
        args = restartFile_args()
        args.fid = fid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_restartFile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = restartFile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def recheckPackage(self, pid):
        """
        Parameters:
         - pid

        """
        self.send_recheckPackage(pid)
        self.recv_recheckPackage()

    def send_recheckPackage(self, pid):
        self._oprot.writeMessageBegin('recheckPackage', TMessageType.CALL, self._seqid)
        args = recheckPackage_args()
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_recheckPackage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = recheckPackage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def stopAllDownloads(self):
        self.send_stopAllDownloads()
        self.recv_stopAllDownloads()

    def send_stopAllDownloads(self):
        self._oprot.writeMessageBegin('stopAllDownloads', TMessageType.CALL, self._seqid)
        args = stopAllDownloads_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_stopAllDownloads(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = stopAllDownloads_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def stopDownloads(self, fids):
        """
        Parameters:
         - fids

        """
        self.send_stopDownloads(fids)
        self.recv_stopDownloads()

    def send_stopDownloads(self, fids):
        self._oprot.writeMessageBegin('stopDownloads', TMessageType.CALL, self._seqid)
        args = stopDownloads_args()
        args.fids = fids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_stopDownloads(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = stopDownloads_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def setPackageName(self, pid, name):
        """
        Parameters:
         - pid
         - name

        """
        self.send_setPackageName(pid, name)
        self.recv_setPackageName()

    def send_setPackageName(self, pid, name):
        self._oprot.writeMessageBegin('setPackageName', TMessageType.CALL, self._seqid)
        args = setPackageName_args()
        args.pid = pid
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setPackageName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setPackageName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def movePackage(self, destination, pid):
        """
        Parameters:
         - destination
         - pid

        """
        self.send_movePackage(destination, pid)
        self.recv_movePackage()

    def send_movePackage(self, destination, pid):
        self._oprot.writeMessageBegin('movePackage', TMessageType.CALL, self._seqid)
        args = movePackage_args()
        args.destination = destination
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_movePackage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = movePackage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def moveFiles(self, fids, pid):
        """
        Parameters:
         - fids
         - pid

        """
        self.send_moveFiles(fids, pid)
        self.recv_moveFiles()

    def send_moveFiles(self, fids, pid):
        self._oprot.writeMessageBegin('moveFiles', TMessageType.CALL, self._seqid)
        args = moveFiles_args()
        args.fids = fids
        args.pid = pid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_moveFiles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = moveFiles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def orderPackage(self, pid, position):
        """
        Parameters:
         - pid
         - position

        """
        self.send_orderPackage(pid, position)
        self.recv_orderPackage()

    def send_orderPackage(self, pid, position):
        self._oprot.writeMessageBegin('orderPackage', TMessageType.CALL, self._seqid)
        args = orderPackage_args()
        args.pid = pid
        args.position = position
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_orderPackage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = orderPackage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def orderFile(self, fid, position):
        """
        Parameters:
         - fid
         - position

        """
        self.send_orderFile(fid, position)
        self.recv_orderFile()

    def send_orderFile(self, fid, position):
        self._oprot.writeMessageBegin('orderFile', TMessageType.CALL, self._seqid)
        args = orderFile_args()
        args.fid = fid
        args.position = position
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_orderFile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = orderFile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def setPackageData(self, pid, data):
        """
        Parameters:
         - pid
         - data

        """
        self.send_setPackageData(pid, data)
        self.recv_setPackageData()

    def send_setPackageData(self, pid, data):
        self._oprot.writeMessageBegin('setPackageData', TMessageType.CALL, self._seqid)
        args = setPackageData_args()
        args.pid = pid
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setPackageData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setPackageData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def deleteFinished(self):
        self.send_deleteFinished()
        return self.recv_deleteFinished()

    def send_deleteFinished(self):
        self._oprot.writeMessageBegin('deleteFinished', TMessageType.CALL, self._seqid)
        args = deleteFinished_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteFinished(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteFinished_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteFinished failed: unknown result")

    def restartFailed(self):
        self.send_restartFailed()
        self.recv_restartFailed()

    def send_restartFailed(self):
        self._oprot.writeMessageBegin('restartFailed', TMessageType.CALL, self._seqid)
        args = restartFailed_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_restartFailed(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = restartFailed_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def getEvents(self, uuid):
        """
        Parameters:
         - uuid

        """
        self.send_getEvents(uuid)
        return self.recv_getEvents()

    def send_getEvents(self, uuid):
        self._oprot.writeMessageBegin('getEvents', TMessageType.CALL, self._seqid)
        args = getEvents_args()
        args.uuid = uuid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getEvents(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getEvents_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getEvents failed: unknown result")

    def getAccounts(self, refresh):
        """
        Parameters:
         - refresh

        """
        self.send_getAccounts(refresh)
        return self.recv_getAccounts()

    def send_getAccounts(self, refresh):
        self._oprot.writeMessageBegin('getAccounts', TMessageType.CALL, self._seqid)
        args = getAccounts_args()
        args.refresh = refresh
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAccounts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAccounts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAccounts failed: unknown result")

    def getAccountTypes(self):
        self.send_getAccountTypes()
        return self.recv_getAccountTypes()

    def send_getAccountTypes(self):
        self._oprot.writeMessageBegin('getAccountTypes', TMessageType.CALL, self._seqid)
        args = getAccountTypes_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAccountTypes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAccountTypes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAccountTypes failed: unknown result")

    def updateAccount(self, plugin, account, password, options):
        """
        Parameters:
         - plugin
         - account
         - password
         - options

        """
        self.send_updateAccount(plugin, account, password, options)
        self.recv_updateAccount()

    def send_updateAccount(self, plugin, account, password, options):
        self._oprot.writeMessageBegin('updateAccount', TMessageType.CALL, self._seqid)
        args = updateAccount_args()
        args.plugin = plugin
        args.account = account
        args.password = password
        args.options = options
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateAccount(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def removeAccount(self, plugin, account):
        """
        Parameters:
         - plugin
         - account

        """
        self.send_removeAccount(plugin, account)
        self.recv_removeAccount()

    def send_removeAccount(self, plugin, account):
        self._oprot.writeMessageBegin('removeAccount', TMessageType.CALL, self._seqid)
        args = removeAccount_args()
        args.plugin = plugin
        args.account = account
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeAccount(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def login(self, username, password):
        """
        Parameters:
         - username
         - password

        """
        self.send_login(username, password)
        return self.recv_login()

    def send_login(self, username, password):
        self._oprot.writeMessageBegin('login', TMessageType.CALL, self._seqid)
        args = login_args()
        args.username = username
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_login(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = login_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "login failed: unknown result")

    def getUserData(self, username, password):
        """
        Parameters:
         - username
         - password

        """
        self.send_getUserData(username, password)
        return self.recv_getUserData()

    def send_getUserData(self, username, password):
        self._oprot.writeMessageBegin('getUserData', TMessageType.CALL, self._seqid)
        args = getUserData_args()
        args.username = username
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserData failed: unknown result")

    def getAllUserData(self):
        self.send_getAllUserData()
        return self.recv_getAllUserData()

    def send_getAllUserData(self):
        self._oprot.writeMessageBegin('getAllUserData', TMessageType.CALL, self._seqid)
        args = getAllUserData_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllUserData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllUserData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUserData failed: unknown result")

    def getServices(self):
        self.send_getServices()
        return self.recv_getServices()

    def send_getServices(self):
        self._oprot.writeMessageBegin('getServices', TMessageType.CALL, self._seqid)
        args = getServices_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getServices(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getServices_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getServices failed: unknown result")

    def hasService(self, plugin, func):
        """
        Parameters:
         - plugin
         - func

        """
        self.send_hasService(plugin, func)
        return self.recv_hasService()

    def send_hasService(self, plugin, func):
        self._oprot.writeMessageBegin('hasService', TMessageType.CALL, self._seqid)
        args = hasService_args()
        args.plugin = plugin
        args.func = func
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_hasService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = hasService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "hasService failed: unknown result")

    def call(self, info):
        """
        Parameters:
         - info

        """
        self.send_call(info)
        return self.recv_call()

    def send_call(self, info):
        self._oprot.writeMessageBegin('call', TMessageType.CALL, self._seqid)
        args = call_args()
        args.info = info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_call(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = call_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "call failed: unknown result")

    def getAllInfo(self):
        self.send_getAllInfo()
        return self.recv_getAllInfo()

    def send_getAllInfo(self):
        self._oprot.writeMessageBegin('getAllInfo', TMessageType.CALL, self._seqid)
        args = getAllInfo_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllInfo failed: unknown result")

    def getInfoByPlugin(self, plugin):
        """
        Parameters:
         - plugin

        """
        self.send_getInfoByPlugin(plugin)
        return self.recv_getInfoByPlugin()

    def send_getInfoByPlugin(self, plugin):
        self._oprot.writeMessageBegin('getInfoByPlugin', TMessageType.CALL, self._seqid)
        args = getInfoByPlugin_args()
        args.plugin = plugin
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getInfoByPlugin(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getInfoByPlugin_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getInfoByPlugin failed: unknown result")

    def isCaptchaWaiting(self):
        self.send_isCaptchaWaiting()
        return self.recv_isCaptchaWaiting()

    def send_isCaptchaWaiting(self):
        self._oprot.writeMessageBegin('isCaptchaWaiting', TMessageType.CALL, self._seqid)
        args = isCaptchaWaiting_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isCaptchaWaiting(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isCaptchaWaiting_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isCaptchaWaiting failed: unknown result")

    def getCaptchaTask(self, exclusive):
        """
        Parameters:
         - exclusive

        """
        self.send_getCaptchaTask(exclusive)
        return self.recv_getCaptchaTask()

    def send_getCaptchaTask(self, exclusive):
        self._oprot.writeMessageBegin('getCaptchaTask', TMessageType.CALL, self._seqid)
        args = getCaptchaTask_args()
        args.exclusive = exclusive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCaptchaTask(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCaptchaTask_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCaptchaTask failed: unknown result")

    def getCaptchaTaskStatus(self, tid):
        """
        Parameters:
         - tid

        """
        self.send_getCaptchaTaskStatus(tid)
        return self.recv_getCaptchaTaskStatus()

    def send_getCaptchaTaskStatus(self, tid):
        self._oprot.writeMessageBegin('getCaptchaTaskStatus', TMessageType.CALL, self._seqid)
        args = getCaptchaTaskStatus_args()
        args.tid = tid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCaptchaTaskStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCaptchaTaskStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCaptchaTaskStatus failed: unknown result")

    def setCaptchaResult(self, tid, result):
        """
        Parameters:
         - tid
         - result

        """
        self.send_setCaptchaResult(tid, result)
        self.recv_setCaptchaResult()

    def send_setCaptchaResult(self, tid, result):
        self._oprot.writeMessageBegin('setCaptchaResult', TMessageType.CALL, self._seqid)
        args = setCaptchaResult_args()
        args.tid = tid
        args.result = result
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setCaptchaResult(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setCaptchaResult_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getConfigValue"] = Processor.process_getConfigValue
        self._processMap["setConfigValue"] = Processor.process_setConfigValue
        self._processMap["getConfig"] = Processor.process_getConfig
        self._processMap["getPluginConfig"] = Processor.process_getPluginConfig
        self._processMap["pauseServer"] = Processor.process_pauseServer
        self._processMap["unpauseServer"] = Processor.process_unpauseServer
        self._processMap["togglePause"] = Processor.process_togglePause
        self._processMap["statusServer"] = Processor.process_statusServer
        self._processMap["freeSpace"] = Processor.process_freeSpace
        self._processMap["getServerVersion"] = Processor.process_getServerVersion
        self._processMap["kill"] = Processor.process_kill
        self._processMap["restart"] = Processor.process_restart
        self._processMap["getLog"] = Processor.process_getLog
        self._processMap["isTimeDownload"] = Processor.process_isTimeDownload
        self._processMap["isTimeReconnect"] = Processor.process_isTimeReconnect
        self._processMap["toggleReconnect"] = Processor.process_toggleReconnect
        self._processMap["generatePackages"] = Processor.process_generatePackages
        self._processMap["checkURLs"] = Processor.process_checkURLs
        self._processMap["parseURLs"] = Processor.process_parseURLs
        self._processMap["checkOnlineStatus"] = Processor.process_checkOnlineStatus
        self._processMap["checkOnlineStatusContainer"] = Processor.process_checkOnlineStatusContainer
        self._processMap["pollResults"] = Processor.process_pollResults
        self._processMap["statusDownloads"] = Processor.process_statusDownloads
        self._processMap["getPackageData"] = Processor.process_getPackageData
        self._processMap["getPackageInfo"] = Processor.process_getPackageInfo
        self._processMap["getFileData"] = Processor.process_getFileData
        self._processMap["getQueue"] = Processor.process_getQueue
        self._processMap["getCollector"] = Processor.process_getCollector
        self._processMap["getQueueData"] = Processor.process_getQueueData
        self._processMap["getCollectorData"] = Processor.process_getCollectorData
        self._processMap["getPackageOrder"] = Processor.process_getPackageOrder
        self._processMap["getFileOrder"] = Processor.process_getFileOrder
        self._processMap["generateAndAddPackages"] = Processor.process_generateAndAddPackages
        self._processMap["addPackage"] = Processor.process_addPackage
        self._processMap["addFiles"] = Processor.process_addFiles
        self._processMap["uploadContainer"] = Processor.process_uploadContainer
        self._processMap["deleteFiles"] = Processor.process_deleteFiles
        self._processMap["deletePackages"] = Processor.process_deletePackages
        self._processMap["pushToQueue"] = Processor.process_pushToQueue
        self._processMap["pullFromQueue"] = Processor.process_pullFromQueue
        self._processMap["restartPackage"] = Processor.process_restartPackage
        self._processMap["restartFile"] = Processor.process_restartFile
        self._processMap["recheckPackage"] = Processor.process_recheckPackage
        self._processMap["stopAllDownloads"] = Processor.process_stopAllDownloads
        self._processMap["stopDownloads"] = Processor.process_stopDownloads
        self._processMap["setPackageName"] = Processor.process_setPackageName
        self._processMap["movePackage"] = Processor.process_movePackage
        self._processMap["moveFiles"] = Processor.process_moveFiles
        self._processMap["orderPackage"] = Processor.process_orderPackage
        self._processMap["orderFile"] = Processor.process_orderFile
        self._processMap["setPackageData"] = Processor.process_setPackageData
        self._processMap["deleteFinished"] = Processor.process_deleteFinished
        self._processMap["restartFailed"] = Processor.process_restartFailed
        self._processMap["getEvents"] = Processor.process_getEvents
        self._processMap["getAccounts"] = Processor.process_getAccounts
        self._processMap["getAccountTypes"] = Processor.process_getAccountTypes
        self._processMap["updateAccount"] = Processor.process_updateAccount
        self._processMap["removeAccount"] = Processor.process_removeAccount
        self._processMap["login"] = Processor.process_login
        self._processMap["getUserData"] = Processor.process_getUserData
        self._processMap["getAllUserData"] = Processor.process_getAllUserData
        self._processMap["getServices"] = Processor.process_getServices
        self._processMap["hasService"] = Processor.process_hasService
        self._processMap["call"] = Processor.process_call
        self._processMap["getAllInfo"] = Processor.process_getAllInfo
        self._processMap["getInfoByPlugin"] = Processor.process_getInfoByPlugin
        self._processMap["isCaptchaWaiting"] = Processor.process_isCaptchaWaiting
        self._processMap["getCaptchaTask"] = Processor.process_getCaptchaTask
        self._processMap["getCaptchaTaskStatus"] = Processor.process_getCaptchaTaskStatus
        self._processMap["setCaptchaResult"] = Processor.process_setCaptchaResult
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_getConfigValue(self, seqid, iprot, oprot):
        args = getConfigValue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getConfigValue_result()
        try:
            result.success = self._handler.getConfigValue(args.category, args.option, args.section)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getConfigValue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setConfigValue(self, seqid, iprot, oprot):
        args = setConfigValue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setConfigValue_result()
        try:
            self._handler.setConfigValue(args.category, args.option, args.value, args.section)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setConfigValue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getConfig(self, seqid, iprot, oprot):
        args = getConfig_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getConfig_result()
        try:
            result.success = self._handler.getConfig()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getConfig", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPluginConfig(self, seqid, iprot, oprot):
        args = getPluginConfig_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPluginConfig_result()
        try:
            result.success = self._handler.getPluginConfig()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPluginConfig", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_pauseServer(self, seqid, iprot, oprot):
        args = pauseServer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = pauseServer_result()
        try:
            self._handler.pauseServer()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("pauseServer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_unpauseServer(self, seqid, iprot, oprot):
        args = unpauseServer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = unpauseServer_result()
        try:
            self._handler.unpauseServer()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("unpauseServer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_togglePause(self, seqid, iprot, oprot):
        args = togglePause_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = togglePause_result()
        try:
            result.success = self._handler.togglePause()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("togglePause", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_statusServer(self, seqid, iprot, oprot):
        args = statusServer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = statusServer_result()
        try:
            result.success = self._handler.statusServer()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("statusServer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_freeSpace(self, seqid, iprot, oprot):
        args = freeSpace_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = freeSpace_result()
        try:
            result.success = self._handler.freeSpace()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("freeSpace", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getServerVersion(self, seqid, iprot, oprot):
        args = getServerVersion_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getServerVersion_result()
        try:
            result.success = self._handler.getServerVersion()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getServerVersion", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_kill(self, seqid, iprot, oprot):
        args = kill_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = kill_result()
        try:
            self._handler.kill()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("kill", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_restart(self, seqid, iprot, oprot):
        args = restart_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = restart_result()
        try:
            self._handler.restart()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("restart", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getLog(self, seqid, iprot, oprot):
        args = getLog_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getLog_result()
        try:
            result.success = self._handler.getLog(args.offset)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getLog", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_isTimeDownload(self, seqid, iprot, oprot):
        args = isTimeDownload_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isTimeDownload_result()
        try:
            result.success = self._handler.isTimeDownload()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("isTimeDownload", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_isTimeReconnect(self, seqid, iprot, oprot):
        args = isTimeReconnect_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isTimeReconnect_result()
        try:
            result.success = self._handler.isTimeReconnect()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("isTimeReconnect", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_toggleReconnect(self, seqid, iprot, oprot):
        args = toggleReconnect_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = toggleReconnect_result()
        try:
            result.success = self._handler.toggleReconnect()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("toggleReconnect", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_generatePackages(self, seqid, iprot, oprot):
        args = generatePackages_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = generatePackages_result()
        try:
            result.success = self._handler.generatePackages(args.links)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("generatePackages", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_checkURLs(self, seqid, iprot, oprot):
        args = checkURLs_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = checkURLs_result()
        try:
            result.success = self._handler.checkURLs(args.urls)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("checkURLs", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_parseURLs(self, seqid, iprot, oprot):
        args = parseURLs_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = parseURLs_result()
        try:
            result.success = self._handler.parseURLs(args.html, args.url)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("parseURLs", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_checkOnlineStatus(self, seqid, iprot, oprot):
        args = checkOnlineStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = checkOnlineStatus_result()
        try:
            result.success = self._handler.checkOnlineStatus(args.urls)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("checkOnlineStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_checkOnlineStatusContainer(self, seqid, iprot, oprot):
        args = checkOnlineStatusContainer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = checkOnlineStatusContainer_result()
        try:
            result.success = self._handler.checkOnlineStatusContainer(args.urls, args.filename, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("checkOnlineStatusContainer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_pollResults(self, seqid, iprot, oprot):
        args = pollResults_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = pollResults_result()
        try:
            result.success = self._handler.pollResults(args.rid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("pollResults", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_statusDownloads(self, seqid, iprot, oprot):
        args = statusDownloads_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = statusDownloads_result()
        try:
            result.success = self._handler.statusDownloads()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("statusDownloads", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPackageData(self, seqid, iprot, oprot):
        args = getPackageData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPackageData_result()
        try:
            result.success = self._handler.getPackageData(args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except PackageDoesNotExists as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPackageData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPackageInfo(self, seqid, iprot, oprot):
        args = getPackageInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPackageInfo_result()
        try:
            result.success = self._handler.getPackageInfo(args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except PackageDoesNotExists as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPackageInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getFileData(self, seqid, iprot, oprot):
        args = getFileData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getFileData_result()
        try:
            result.success = self._handler.getFileData(args.fid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except FileDoesNotExists as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getFileData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getQueue(self, seqid, iprot, oprot):
        args = getQueue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getQueue_result()
        try:
            result.success = self._handler.getQueue()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getQueue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCollector(self, seqid, iprot, oprot):
        args = getCollector_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCollector_result()
        try:
            result.success = self._handler.getCollector()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCollector", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getQueueData(self, seqid, iprot, oprot):
        args = getQueueData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getQueueData_result()
        try:
            result.success = self._handler.getQueueData()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getQueueData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCollectorData(self, seqid, iprot, oprot):
        args = getCollectorData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCollectorData_result()
        try:
            result.success = self._handler.getCollectorData()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCollectorData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPackageOrder(self, seqid, iprot, oprot):
        args = getPackageOrder_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPackageOrder_result()
        try:
            result.success = self._handler.getPackageOrder(args.destination)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPackageOrder", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getFileOrder(self, seqid, iprot, oprot):
        args = getFileOrder_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getFileOrder_result()
        try:
            result.success = self._handler.getFileOrder(args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getFileOrder", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_generateAndAddPackages(self, seqid, iprot, oprot):
        args = generateAndAddPackages_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = generateAndAddPackages_result()
        try:
            result.success = self._handler.generateAndAddPackages(args.links, args.dest)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("generateAndAddPackages", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_addPackage(self, seqid, iprot, oprot):
        args = addPackage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addPackage_result()
        try:
            result.success = self._handler.addPackage(args.name, args.links, args.dest)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("addPackage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_addFiles(self, seqid, iprot, oprot):
        args = addFiles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addFiles_result()
        try:
            self._handler.addFiles(args.pid, args.links)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("addFiles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_uploadContainer(self, seqid, iprot, oprot):
        args = uploadContainer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = uploadContainer_result()
        try:
            self._handler.uploadContainer(args.filename, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("uploadContainer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteFiles(self, seqid, iprot, oprot):
        args = deleteFiles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteFiles_result()
        try:
            self._handler.deleteFiles(args.fids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteFiles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deletePackages(self, seqid, iprot, oprot):
        args = deletePackages_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deletePackages_result()
        try:
            self._handler.deletePackages(args.pids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deletePackages", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_pushToQueue(self, seqid, iprot, oprot):
        args = pushToQueue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = pushToQueue_result()
        try:
            self._handler.pushToQueue(args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("pushToQueue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_pullFromQueue(self, seqid, iprot, oprot):
        args = pullFromQueue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = pullFromQueue_result()
        try:
            self._handler.pullFromQueue(args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("pullFromQueue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_restartPackage(self, seqid, iprot, oprot):
        args = restartPackage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = restartPackage_result()
        try:
            self._handler.restartPackage(args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("restartPackage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_restartFile(self, seqid, iprot, oprot):
        args = restartFile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = restartFile_result()
        try:
            self._handler.restartFile(args.fid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("restartFile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_recheckPackage(self, seqid, iprot, oprot):
        args = recheckPackage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = recheckPackage_result()
        try:
            self._handler.recheckPackage(args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("recheckPackage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stopAllDownloads(self, seqid, iprot, oprot):
        args = stopAllDownloads_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stopAllDownloads_result()
        try:
            self._handler.stopAllDownloads()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("stopAllDownloads", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stopDownloads(self, seqid, iprot, oprot):
        args = stopDownloads_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stopDownloads_result()
        try:
            self._handler.stopDownloads(args.fids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("stopDownloads", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setPackageName(self, seqid, iprot, oprot):
        args = setPackageName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setPackageName_result()
        try:
            self._handler.setPackageName(args.pid, args.name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setPackageName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_movePackage(self, seqid, iprot, oprot):
        args = movePackage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = movePackage_result()
        try:
            self._handler.movePackage(args.destination, args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("movePackage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_moveFiles(self, seqid, iprot, oprot):
        args = moveFiles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = moveFiles_result()
        try:
            self._handler.moveFiles(args.fids, args.pid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("moveFiles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_orderPackage(self, seqid, iprot, oprot):
        args = orderPackage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = orderPackage_result()
        try:
            self._handler.orderPackage(args.pid, args.position)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("orderPackage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_orderFile(self, seqid, iprot, oprot):
        args = orderFile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = orderFile_result()
        try:
            self._handler.orderFile(args.fid, args.position)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("orderFile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setPackageData(self, seqid, iprot, oprot):
        args = setPackageData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setPackageData_result()
        try:
            self._handler.setPackageData(args.pid, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except PackageDoesNotExists as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setPackageData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteFinished(self, seqid, iprot, oprot):
        args = deleteFinished_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteFinished_result()
        try:
            result.success = self._handler.deleteFinished()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteFinished", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_restartFailed(self, seqid, iprot, oprot):
        args = restartFailed_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = restartFailed_result()
        try:
            self._handler.restartFailed()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("restartFailed", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getEvents(self, seqid, iprot, oprot):
        args = getEvents_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getEvents_result()
        try:
            result.success = self._handler.getEvents(args.uuid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getEvents", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAccounts(self, seqid, iprot, oprot):
        args = getAccounts_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAccounts_result()
        try:
            result.success = self._handler.getAccounts(args.refresh)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAccounts", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAccountTypes(self, seqid, iprot, oprot):
        args = getAccountTypes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAccountTypes_result()
        try:
            result.success = self._handler.getAccountTypes()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAccountTypes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateAccount(self, seqid, iprot, oprot):
        args = updateAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateAccount_result()
        try:
            self._handler.updateAccount(args.plugin, args.account, args.password, args.options)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateAccount", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeAccount(self, seqid, iprot, oprot):
        args = removeAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeAccount_result()
        try:
            self._handler.removeAccount(args.plugin, args.account)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeAccount", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_login(self, seqid, iprot, oprot):
        args = login_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = login_result()
        try:
            result.success = self._handler.login(args.username, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("login", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUserData(self, seqid, iprot, oprot):
        args = getUserData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUserData_result()
        try:
            result.success = self._handler.getUserData(args.username, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUserData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAllUserData(self, seqid, iprot, oprot):
        args = getAllUserData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllUserData_result()
        try:
            result.success = self._handler.getAllUserData()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllUserData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getServices(self, seqid, iprot, oprot):
        args = getServices_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getServices_result()
        try:
            result.success = self._handler.getServices()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getServices", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_hasService(self, seqid, iprot, oprot):
        args = hasService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = hasService_result()
        try:
            result.success = self._handler.hasService(args.plugin, args.func)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("hasService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_call(self, seqid, iprot, oprot):
        args = call_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = call_result()
        try:
            result.success = self._handler.call(args.info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceDoesNotExists as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except ServiceException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("call", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAllInfo(self, seqid, iprot, oprot):
        args = getAllInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllInfo_result()
        try:
            result.success = self._handler.getAllInfo()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getInfoByPlugin(self, seqid, iprot, oprot):
        args = getInfoByPlugin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getInfoByPlugin_result()
        try:
            result.success = self._handler.getInfoByPlugin(args.plugin)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getInfoByPlugin", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_isCaptchaWaiting(self, seqid, iprot, oprot):
        args = isCaptchaWaiting_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isCaptchaWaiting_result()
        try:
            result.success = self._handler.isCaptchaWaiting()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("isCaptchaWaiting", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCaptchaTask(self, seqid, iprot, oprot):
        args = getCaptchaTask_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCaptchaTask_result()
        try:
            result.success = self._handler.getCaptchaTask(args.exclusive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCaptchaTask", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCaptchaTaskStatus(self, seqid, iprot, oprot):
        args = getCaptchaTaskStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCaptchaTaskStatus_result()
        try:
            result.success = self._handler.getCaptchaTaskStatus(args.tid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCaptchaTaskStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setCaptchaResult(self, seqid, iprot, oprot):
        args = setCaptchaResult_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setCaptchaResult_result()
        try:
            self._handler.setCaptchaResult(args.tid, args.result)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setCaptchaResult", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class getConfigValue_args(TBase):
    """
    Attributes:
     - category
     - option
     - section

    """

    __slots__ = (
        'category',
        'option',
        'section',
    )


    def __init__(self, category=None, option=None, section=None,):
        self.category = category
        self.option = option
        self.section = section
all_structs.append(getConfigValue_args)
getConfigValue_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'category', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'option', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'section', 'UTF8', None, ),  # 3
)


class getConfigValue_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getConfigValue_result)
getConfigValue_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class setConfigValue_args(TBase):
    """
    Attributes:
     - category
     - option
     - value
     - section

    """

    __slots__ = (
        'category',
        'option',
        'value',
        'section',
    )


    def __init__(self, category=None, option=None, value=None, section=None,):
        self.category = category
        self.option = option
        self.value = value
        self.section = section
all_structs.append(setConfigValue_args)
setConfigValue_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'category', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'option', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'value', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'section', 'UTF8', None, ),  # 4
)


class setConfigValue_result(TBase):

    __slots__ = (
    )

all_structs.append(setConfigValue_result)
setConfigValue_result.thrift_spec = (
)


class getConfig_args(TBase):

    __slots__ = (
    )

all_structs.append(getConfig_args)
getConfig_args.thrift_spec = (
)


class getConfig_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getConfig_result)
getConfig_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRUCT, [ConfigSection, None], False), None, ),  # 0
)


class getPluginConfig_args(TBase):

    __slots__ = (
    )

all_structs.append(getPluginConfig_args)
getPluginConfig_args.thrift_spec = (
)


class getPluginConfig_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getPluginConfig_result)
getPluginConfig_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRUCT, [ConfigSection, None], False), None, ),  # 0
)


class pauseServer_args(TBase):

    __slots__ = (
    )

all_structs.append(pauseServer_args)
pauseServer_args.thrift_spec = (
)


class pauseServer_result(TBase):

    __slots__ = (
    )

all_structs.append(pauseServer_result)
pauseServer_result.thrift_spec = (
)


class unpauseServer_args(TBase):

    __slots__ = (
    )

all_structs.append(unpauseServer_args)
unpauseServer_args.thrift_spec = (
)


class unpauseServer_result(TBase):

    __slots__ = (
    )

all_structs.append(unpauseServer_result)
unpauseServer_result.thrift_spec = (
)


class togglePause_args(TBase):

    __slots__ = (
    )

all_structs.append(togglePause_args)
togglePause_args.thrift_spec = (
)


class togglePause_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(togglePause_result)
togglePause_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class statusServer_args(TBase):

    __slots__ = (
    )

all_structs.append(statusServer_args)
statusServer_args.thrift_spec = (
)


class statusServer_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(statusServer_result)
statusServer_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ServerStatus, None], None, ),  # 0
)


class freeSpace_args(TBase):

    __slots__ = (
    )

all_structs.append(freeSpace_args)
freeSpace_args.thrift_spec = (
)


class freeSpace_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(freeSpace_result)
freeSpace_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class getServerVersion_args(TBase):

    __slots__ = (
    )

all_structs.append(getServerVersion_args)
getServerVersion_args.thrift_spec = (
)


class getServerVersion_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getServerVersion_result)
getServerVersion_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class kill_args(TBase):

    __slots__ = (
    )

all_structs.append(kill_args)
kill_args.thrift_spec = (
)


class kill_result(TBase):

    __slots__ = (
    )

all_structs.append(kill_result)
kill_result.thrift_spec = (
)


class restart_args(TBase):

    __slots__ = (
    )

all_structs.append(restart_args)
restart_args.thrift_spec = (
)


class restart_result(TBase):

    __slots__ = (
    )

all_structs.append(restart_result)
restart_result.thrift_spec = (
)


class getLog_args(TBase):
    """
    Attributes:
     - offset

    """

    __slots__ = (
        'offset',
    )


    def __init__(self, offset=None,):
        self.offset = offset
all_structs.append(getLog_args)
getLog_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'offset', None, None, ),  # 1
)


class getLog_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getLog_result)
getLog_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
)


class isTimeDownload_args(TBase):

    __slots__ = (
    )

all_structs.append(isTimeDownload_args)
isTimeDownload_args.thrift_spec = (
)


class isTimeDownload_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(isTimeDownload_result)
isTimeDownload_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class isTimeReconnect_args(TBase):

    __slots__ = (
    )

all_structs.append(isTimeReconnect_args)
isTimeReconnect_args.thrift_spec = (
)


class isTimeReconnect_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(isTimeReconnect_result)
isTimeReconnect_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class toggleReconnect_args(TBase):

    __slots__ = (
    )

all_structs.append(toggleReconnect_args)
toggleReconnect_args.thrift_spec = (
)


class toggleReconnect_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(toggleReconnect_result)
toggleReconnect_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class generatePackages_args(TBase):
    """
    Attributes:
     - links

    """

    __slots__ = (
        'links',
    )


    def __init__(self, links=None,):
        self.links = links
all_structs.append(generatePackages_args)
generatePackages_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'links', (TType.STRING, 'UTF8', False), None, ),  # 1
)


class generatePackages_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(generatePackages_result)
generatePackages_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 0
)


class checkURLs_args(TBase):
    """
    Attributes:
     - urls

    """

    __slots__ = (
        'urls',
    )


    def __init__(self, urls=None,):
        self.urls = urls
all_structs.append(checkURLs_args)
checkURLs_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'urls', (TType.STRING, 'UTF8', False), None, ),  # 1
)


class checkURLs_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(checkURLs_result)
checkURLs_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 0
)


class parseURLs_args(TBase):
    """
    Attributes:
     - html
     - url

    """

    __slots__ = (
        'html',
        'url',
    )


    def __init__(self, html=None, url=None,):
        self.html = html
        self.url = url
all_structs.append(parseURLs_args)
parseURLs_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'html', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'url', 'UTF8', None, ),  # 2
)


class parseURLs_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(parseURLs_result)
parseURLs_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 0
)


class checkOnlineStatus_args(TBase):
    """
    Attributes:
     - urls

    """

    __slots__ = (
        'urls',
    )


    def __init__(self, urls=None,):
        self.urls = urls
all_structs.append(checkOnlineStatus_args)
checkOnlineStatus_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'urls', (TType.STRING, 'UTF8', False), None, ),  # 1
)


class checkOnlineStatus_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(checkOnlineStatus_result)
checkOnlineStatus_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [OnlineCheck, None], None, ),  # 0
)


class checkOnlineStatusContainer_args(TBase):
    """
    Attributes:
     - urls
     - filename
     - data

    """

    __slots__ = (
        'urls',
        'filename',
        'data',
    )


    def __init__(self, urls=None, filename=None, data=None,):
        self.urls = urls
        self.filename = filename
        self.data = data
all_structs.append(checkOnlineStatusContainer_args)
checkOnlineStatusContainer_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'urls', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'filename', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'data', 'BINARY', None, ),  # 3
)


class checkOnlineStatusContainer_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(checkOnlineStatusContainer_result)
checkOnlineStatusContainer_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [OnlineCheck, None], None, ),  # 0
)


class pollResults_args(TBase):
    """
    Attributes:
     - rid

    """

    __slots__ = (
        'rid',
    )


    def __init__(self, rid=None,):
        self.rid = rid
all_structs.append(pollResults_args)
pollResults_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'rid', None, None, ),  # 1
)


class pollResults_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(pollResults_result)
pollResults_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [OnlineCheck, None], None, ),  # 0
)


class statusDownloads_args(TBase):

    __slots__ = (
    )

all_structs.append(statusDownloads_args)
statusDownloads_args.thrift_spec = (
)


class statusDownloads_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(statusDownloads_result)
statusDownloads_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [DownloadInfo, None], False), None, ),  # 0
)


class getPackageData_args(TBase):
    """
    Attributes:
     - pid

    """

    __slots__ = (
        'pid',
    )


    def __init__(self, pid=None,):
        self.pid = pid
all_structs.append(getPackageData_args)
getPackageData_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
)


class getPackageData_result(TBase):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e
all_structs.append(getPackageData_result)
getPackageData_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [PackageData, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [PackageDoesNotExists, None], None, ),  # 1
)


class getPackageInfo_args(TBase):
    """
    Attributes:
     - pid

    """

    __slots__ = (
        'pid',
    )


    def __init__(self, pid=None,):
        self.pid = pid
all_structs.append(getPackageInfo_args)
getPackageInfo_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
)


class getPackageInfo_result(TBase):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e
all_structs.append(getPackageInfo_result)
getPackageInfo_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [PackageData, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [PackageDoesNotExists, None], None, ),  # 1
)


class getFileData_args(TBase):
    """
    Attributes:
     - fid

    """

    __slots__ = (
        'fid',
    )


    def __init__(self, fid=None,):
        self.fid = fid
all_structs.append(getFileData_args)
getFileData_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'fid', None, None, ),  # 1
)


class getFileData_result(TBase):
    """
    Attributes:
     - success
     - e

    """

    __slots__ = (
        'success',
        'e',
    )


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e
all_structs.append(getFileData_result)
getFileData_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [FileData, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [FileDoesNotExists, None], None, ),  # 1
)


class getQueue_args(TBase):

    __slots__ = (
    )

all_structs.append(getQueue_args)
getQueue_args.thrift_spec = (
)


class getQueue_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getQueue_result)
getQueue_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [PackageData, None], False), None, ),  # 0
)


class getCollector_args(TBase):

    __slots__ = (
    )

all_structs.append(getCollector_args)
getCollector_args.thrift_spec = (
)


class getCollector_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getCollector_result)
getCollector_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [PackageData, None], False), None, ),  # 0
)


class getQueueData_args(TBase):

    __slots__ = (
    )

all_structs.append(getQueueData_args)
getQueueData_args.thrift_spec = (
)


class getQueueData_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getQueueData_result)
getQueueData_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [PackageData, None], False), None, ),  # 0
)


class getCollectorData_args(TBase):

    __slots__ = (
    )

all_structs.append(getCollectorData_args)
getCollectorData_args.thrift_spec = (
)


class getCollectorData_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getCollectorData_result)
getCollectorData_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [PackageData, None], False), None, ),  # 0
)


class getPackageOrder_args(TBase):
    """
    Attributes:
     - destination

    """

    __slots__ = (
        'destination',
    )


    def __init__(self, destination=None,):
        self.destination = destination
all_structs.append(getPackageOrder_args)
getPackageOrder_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'destination', None, None, ),  # 1
)


class getPackageOrder_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getPackageOrder_result)
getPackageOrder_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.I16, None, TType.I32, None, False), None, ),  # 0
)


class getFileOrder_args(TBase):
    """
    Attributes:
     - pid

    """

    __slots__ = (
        'pid',
    )


    def __init__(self, pid=None,):
        self.pid = pid
all_structs.append(getFileOrder_args)
getFileOrder_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
)


class getFileOrder_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getFileOrder_result)
getFileOrder_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.I16, None, TType.I32, None, False), None, ),  # 0
)


class generateAndAddPackages_args(TBase):
    """
    Attributes:
     - links
     - dest

    """

    __slots__ = (
        'links',
        'dest',
    )


    def __init__(self, links=None, dest=None,):
        self.links = links
        self.dest = dest
all_structs.append(generateAndAddPackages_args)
generateAndAddPackages_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'links', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.I32, 'dest', None, None, ),  # 2
)


class generateAndAddPackages_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(generateAndAddPackages_result)
generateAndAddPackages_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
)


class addPackage_args(TBase):
    """
    Attributes:
     - name
     - links
     - dest

    """

    __slots__ = (
        'name',
        'links',
        'dest',
    )


    def __init__(self, name=None, links=None, dest=None,):
        self.name = name
        self.links = links
        self.dest = dest
all_structs.append(addPackage_args)
addPackage_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'links', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'dest', None, None, ),  # 3
)


class addPackage_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(addPackage_result)
addPackage_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class addFiles_args(TBase):
    """
    Attributes:
     - pid
     - links

    """

    __slots__ = (
        'pid',
        'links',
    )


    def __init__(self, pid=None, links=None,):
        self.pid = pid
        self.links = links
all_structs.append(addFiles_args)
addFiles_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
    (2, TType.LIST, 'links', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class addFiles_result(TBase):

    __slots__ = (
    )

all_structs.append(addFiles_result)
addFiles_result.thrift_spec = (
)


class uploadContainer_args(TBase):
    """
    Attributes:
     - filename
     - data

    """

    __slots__ = (
        'filename',
        'data',
    )


    def __init__(self, filename=None, data=None,):
        self.filename = filename
        self.data = data
all_structs.append(uploadContainer_args)
uploadContainer_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'filename', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
)


class uploadContainer_result(TBase):

    __slots__ = (
    )

all_structs.append(uploadContainer_result)
uploadContainer_result.thrift_spec = (
)


class deleteFiles_args(TBase):
    """
    Attributes:
     - fids

    """

    __slots__ = (
        'fids',
    )


    def __init__(self, fids=None,):
        self.fids = fids
all_structs.append(deleteFiles_args)
deleteFiles_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fids', (TType.I32, None, False), None, ),  # 1
)


class deleteFiles_result(TBase):

    __slots__ = (
    )

all_structs.append(deleteFiles_result)
deleteFiles_result.thrift_spec = (
)


class deletePackages_args(TBase):
    """
    Attributes:
     - pids

    """

    __slots__ = (
        'pids',
    )


    def __init__(self, pids=None,):
        self.pids = pids
all_structs.append(deletePackages_args)
deletePackages_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'pids', (TType.I32, None, False), None, ),  # 1
)


class deletePackages_result(TBase):

    __slots__ = (
    )

all_structs.append(deletePackages_result)
deletePackages_result.thrift_spec = (
)


class pushToQueue_args(TBase):
    """
    Attributes:
     - pid

    """

    __slots__ = (
        'pid',
    )


    def __init__(self, pid=None,):
        self.pid = pid
all_structs.append(pushToQueue_args)
pushToQueue_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
)


class pushToQueue_result(TBase):

    __slots__ = (
    )

all_structs.append(pushToQueue_result)
pushToQueue_result.thrift_spec = (
)


class pullFromQueue_args(TBase):
    """
    Attributes:
     - pid

    """

    __slots__ = (
        'pid',
    )


    def __init__(self, pid=None,):
        self.pid = pid
all_structs.append(pullFromQueue_args)
pullFromQueue_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
)


class pullFromQueue_result(TBase):

    __slots__ = (
    )

all_structs.append(pullFromQueue_result)
pullFromQueue_result.thrift_spec = (
)


class restartPackage_args(TBase):
    """
    Attributes:
     - pid

    """

    __slots__ = (
        'pid',
    )


    def __init__(self, pid=None,):
        self.pid = pid
all_structs.append(restartPackage_args)
restartPackage_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
)


class restartPackage_result(TBase):

    __slots__ = (
    )

all_structs.append(restartPackage_result)
restartPackage_result.thrift_spec = (
)


class restartFile_args(TBase):
    """
    Attributes:
     - fid

    """

    __slots__ = (
        'fid',
    )


    def __init__(self, fid=None,):
        self.fid = fid
all_structs.append(restartFile_args)
restartFile_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'fid', None, None, ),  # 1
)


class restartFile_result(TBase):

    __slots__ = (
    )

all_structs.append(restartFile_result)
restartFile_result.thrift_spec = (
)


class recheckPackage_args(TBase):
    """
    Attributes:
     - pid

    """

    __slots__ = (
        'pid',
    )


    def __init__(self, pid=None,):
        self.pid = pid
all_structs.append(recheckPackage_args)
recheckPackage_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
)


class recheckPackage_result(TBase):

    __slots__ = (
    )

all_structs.append(recheckPackage_result)
recheckPackage_result.thrift_spec = (
)


class stopAllDownloads_args(TBase):

    __slots__ = (
    )

all_structs.append(stopAllDownloads_args)
stopAllDownloads_args.thrift_spec = (
)


class stopAllDownloads_result(TBase):

    __slots__ = (
    )

all_structs.append(stopAllDownloads_result)
stopAllDownloads_result.thrift_spec = (
)


class stopDownloads_args(TBase):
    """
    Attributes:
     - fids

    """

    __slots__ = (
        'fids',
    )


    def __init__(self, fids=None,):
        self.fids = fids
all_structs.append(stopDownloads_args)
stopDownloads_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fids', (TType.I32, None, False), None, ),  # 1
)


class stopDownloads_result(TBase):

    __slots__ = (
    )

all_structs.append(stopDownloads_result)
stopDownloads_result.thrift_spec = (
)


class setPackageName_args(TBase):
    """
    Attributes:
     - pid
     - name

    """

    __slots__ = (
        'pid',
        'name',
    )


    def __init__(self, pid=None, name=None,):
        self.pid = pid
        self.name = name
all_structs.append(setPackageName_args)
setPackageName_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)


class setPackageName_result(TBase):

    __slots__ = (
    )

all_structs.append(setPackageName_result)
setPackageName_result.thrift_spec = (
)


class movePackage_args(TBase):
    """
    Attributes:
     - destination
     - pid

    """

    __slots__ = (
        'destination',
        'pid',
    )


    def __init__(self, destination=None, pid=None,):
        self.destination = destination
        self.pid = pid
all_structs.append(movePackage_args)
movePackage_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'destination', None, None, ),  # 1
    (2, TType.I32, 'pid', None, None, ),  # 2
)


class movePackage_result(TBase):

    __slots__ = (
    )

all_structs.append(movePackage_result)
movePackage_result.thrift_spec = (
)


class moveFiles_args(TBase):
    """
    Attributes:
     - fids
     - pid

    """

    __slots__ = (
        'fids',
        'pid',
    )


    def __init__(self, fids=None, pid=None,):
        self.fids = fids
        self.pid = pid
all_structs.append(moveFiles_args)
moveFiles_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fids', (TType.I32, None, False), None, ),  # 1
    (2, TType.I32, 'pid', None, None, ),  # 2
)


class moveFiles_result(TBase):

    __slots__ = (
    )

all_structs.append(moveFiles_result)
moveFiles_result.thrift_spec = (
)


class orderPackage_args(TBase):
    """
    Attributes:
     - pid
     - position

    """

    __slots__ = (
        'pid',
        'position',
    )


    def __init__(self, pid=None, position=None,):
        self.pid = pid
        self.position = position
all_structs.append(orderPackage_args)
orderPackage_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
    (2, TType.I16, 'position', None, None, ),  # 2
)


class orderPackage_result(TBase):

    __slots__ = (
    )

all_structs.append(orderPackage_result)
orderPackage_result.thrift_spec = (
)


class orderFile_args(TBase):
    """
    Attributes:
     - fid
     - position

    """

    __slots__ = (
        'fid',
        'position',
    )


    def __init__(self, fid=None, position=None,):
        self.fid = fid
        self.position = position
all_structs.append(orderFile_args)
orderFile_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'fid', None, None, ),  # 1
    (2, TType.I16, 'position', None, None, ),  # 2
)


class orderFile_result(TBase):

    __slots__ = (
    )

all_structs.append(orderFile_result)
orderFile_result.thrift_spec = (
)


class setPackageData_args(TBase):
    """
    Attributes:
     - pid
     - data

    """

    __slots__ = (
        'pid',
        'data',
    )


    def __init__(self, pid=None, data=None,):
        self.pid = pid
        self.data = data
all_structs.append(setPackageData_args)
setPackageData_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pid', None, None, ),  # 1
    (2, TType.MAP, 'data', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class setPackageData_result(TBase):
    """
    Attributes:
     - e

    """

    __slots__ = (
        'e',
    )


    def __init__(self, e=None,):
        self.e = e
all_structs.append(setPackageData_result)
setPackageData_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [PackageDoesNotExists, None], None, ),  # 1
)


class deleteFinished_args(TBase):

    __slots__ = (
    )

all_structs.append(deleteFinished_args)
deleteFinished_args.thrift_spec = (
)


class deleteFinished_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(deleteFinished_result)
deleteFinished_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
)


class restartFailed_args(TBase):

    __slots__ = (
    )

all_structs.append(restartFailed_args)
restartFailed_args.thrift_spec = (
)


class restartFailed_result(TBase):

    __slots__ = (
    )

all_structs.append(restartFailed_result)
restartFailed_result.thrift_spec = (
)


class getEvents_args(TBase):
    """
    Attributes:
     - uuid

    """

    __slots__ = (
        'uuid',
    )


    def __init__(self, uuid=None,):
        self.uuid = uuid
all_structs.append(getEvents_args)
getEvents_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
)


class getEvents_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getEvents_result)
getEvents_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [EventInfo, None], False), None, ),  # 0
)


class getAccounts_args(TBase):
    """
    Attributes:
     - refresh

    """

    __slots__ = (
        'refresh',
    )


    def __init__(self, refresh=None,):
        self.refresh = refresh
all_structs.append(getAccounts_args)
getAccounts_args.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'refresh', None, None, ),  # 1
)


class getAccounts_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getAccounts_result)
getAccounts_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [AccountInfo, None], False), None, ),  # 0
)


class getAccountTypes_args(TBase):

    __slots__ = (
    )

all_structs.append(getAccountTypes_args)
getAccountTypes_args.thrift_spec = (
)


class getAccountTypes_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getAccountTypes_result)
getAccountTypes_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
)


class updateAccount_args(TBase):
    """
    Attributes:
     - plugin
     - account
     - password
     - options

    """

    __slots__ = (
        'plugin',
        'account',
        'password',
        'options',
    )


    def __init__(self, plugin=None, account=None, password=None, options=None,):
        self.plugin = plugin
        self.account = account
        self.password = password
        self.options = options
all_structs.append(updateAccount_args)
updateAccount_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'plugin', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'account', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'options', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
)


class updateAccount_result(TBase):

    __slots__ = (
    )

all_structs.append(updateAccount_result)
updateAccount_result.thrift_spec = (
)


class removeAccount_args(TBase):
    """
    Attributes:
     - plugin
     - account

    """

    __slots__ = (
        'plugin',
        'account',
    )


    def __init__(self, plugin=None, account=None,):
        self.plugin = plugin
        self.account = account
all_structs.append(removeAccount_args)
removeAccount_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'plugin', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'account', 'UTF8', None, ),  # 2
)


class removeAccount_result(TBase):

    __slots__ = (
    )

all_structs.append(removeAccount_result)
removeAccount_result.thrift_spec = (
)


class login_args(TBase):
    """
    Attributes:
     - username
     - password

    """

    __slots__ = (
        'username',
        'password',
    )


    def __init__(self, username=None, password=None,):
        self.username = username
        self.password = password
all_structs.append(login_args)
login_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class login_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(login_result)
login_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class getUserData_args(TBase):
    """
    Attributes:
     - username
     - password

    """

    __slots__ = (
        'username',
        'password',
    )


    def __init__(self, username=None, password=None,):
        self.username = username
        self.password = password
all_structs.append(getUserData_args)
getUserData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class getUserData_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getUserData_result)
getUserData_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [UserData, None], None, ),  # 0
)


class getAllUserData_args(TBase):

    __slots__ = (
    )

all_structs.append(getAllUserData_args)
getAllUserData_args.thrift_spec = (
)


class getAllUserData_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getAllUserData_result)
getAllUserData_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRUCT, [UserData, None], False), None, ),  # 0
)


class getServices_args(TBase):

    __slots__ = (
    )

all_structs.append(getServices_args)
getServices_args.thrift_spec = (
)


class getServices_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getServices_result)
getServices_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 0
)


class hasService_args(TBase):
    """
    Attributes:
     - plugin
     - func

    """

    __slots__ = (
        'plugin',
        'func',
    )


    def __init__(self, plugin=None, func=None,):
        self.plugin = plugin
        self.func = func
all_structs.append(hasService_args)
hasService_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'plugin', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'func', 'UTF8', None, ),  # 2
)


class hasService_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(hasService_result)
hasService_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class call_args(TBase):
    """
    Attributes:
     - info

    """

    __slots__ = (
        'info',
    )


    def __init__(self, info=None,):
        self.info = info
all_structs.append(call_args)
call_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'info', [ServiceCall, None], None, ),  # 1
)


class call_result(TBase):
    """
    Attributes:
     - success
     - ex
     - e

    """

    __slots__ = (
        'success',
        'ex',
        'e',
    )


    def __init__(self, success=None, ex=None, e=None,):
        self.success = success
        self.ex = ex
        self.e = e
all_structs.append(call_result)
call_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'ex', [ServiceDoesNotExists, None], None, ),  # 1
    (2, TType.STRUCT, 'e', [ServiceException, None], None, ),  # 2
)


class getAllInfo_args(TBase):

    __slots__ = (
    )

all_structs.append(getAllInfo_args)
getAllInfo_args.thrift_spec = (
)


class getAllInfo_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getAllInfo_result)
getAllInfo_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 0
)


class getInfoByPlugin_args(TBase):
    """
    Attributes:
     - plugin

    """

    __slots__ = (
        'plugin',
    )


    def __init__(self, plugin=None,):
        self.plugin = plugin
all_structs.append(getInfoByPlugin_args)
getInfoByPlugin_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'plugin', 'UTF8', None, ),  # 1
)


class getInfoByPlugin_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getInfoByPlugin_result)
getInfoByPlugin_result.thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 0
)


class isCaptchaWaiting_args(TBase):

    __slots__ = (
    )

all_structs.append(isCaptchaWaiting_args)
isCaptchaWaiting_args.thrift_spec = (
)


class isCaptchaWaiting_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(isCaptchaWaiting_result)
isCaptchaWaiting_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class getCaptchaTask_args(TBase):
    """
    Attributes:
     - exclusive

    """

    __slots__ = (
        'exclusive',
    )


    def __init__(self, exclusive=None,):
        self.exclusive = exclusive
all_structs.append(getCaptchaTask_args)
getCaptchaTask_args.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'exclusive', None, None, ),  # 1
)


class getCaptchaTask_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getCaptchaTask_result)
getCaptchaTask_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CaptchaTask, None], None, ),  # 0
)


class getCaptchaTaskStatus_args(TBase):
    """
    Attributes:
     - tid

    """

    __slots__ = (
        'tid',
    )


    def __init__(self, tid=None,):
        self.tid = tid
all_structs.append(getCaptchaTaskStatus_args)
getCaptchaTaskStatus_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'tid', None, None, ),  # 1
)


class getCaptchaTaskStatus_result(TBase):
    """
    Attributes:
     - success

    """

    __slots__ = (
        'success',
    )


    def __init__(self, success=None,):
        self.success = success
all_structs.append(getCaptchaTaskStatus_result)
getCaptchaTaskStatus_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class setCaptchaResult_args(TBase):
    """
    Attributes:
     - tid
     - result

    """

    __slots__ = (
        'tid',
        'result',
    )


    def __init__(self, tid=None, result=None,):
        self.tid = tid
        self.result = result
all_structs.append(setCaptchaResult_args)
setCaptchaResult_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'tid', None, None, ),  # 1
    (2, TType.STRING, 'result', 'UTF8', None, ),  # 2
)


class setCaptchaResult_result(TBase):

    __slots__ = (
    )

all_structs.append(setCaptchaResult_result)
setCaptchaResult_result.thrift_spec = (
)
fix_spec(all_structs)
del all_structs
